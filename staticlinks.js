/*\
title: $:/plugins/tiddlywiki/welford/staticlinks.js
type: application/javascript
module-type: widget

specifies which subfolder a link will be output under, and how to link properly to them

\*/
(function() {

/*jslint node: true, browser: true */
/*global $tw: false */
"use strict";

var LinkWidget = require("$:/core/modules/widgets/link.js").link;


var TAG_ATTR = "tag";
var FRAMEWORK_ATTR = "framework";
var POSTS_ATTR = "posts";
var INDEX_ATTR = "index";

var BLOG_TAG = "blog";
var FRAMEWORK_TAG = "blog-framework";
var TAG_LINK_ATTR = "taglink";

var INDEX_POST = "index";

/*
======================================================
folder stucture description:
This plugin creates/facilitates the following output style
everything is output in lower case

./index.html								//will have the attribute INDEX_ATTR
./[tiddlers tagged "blog-framework"].html	//will have the attribute FRAMEWORK_ATTR
./tags/autogenerated_tag_posts.html			//will have the attribute TAG_ATTR
./[year]/[month]/[day]/blogpost.html		//will have the attribute POSTS_ATTR

======================================================
*/

//Called from the rendertiddlers command
//if attr is unrecognised i take it to be a path and returns it unchanged

//just pass back originalPath if you won't want to do anything with it
//usually path is constructed thus: [outputPath]/[pathParam]/[title].[extension]
LinkWidget.getExportFolder = function(originalPath,outputPath,pathParam,title,extension) {
	var path = require("path");
	var pathname = originalPath;

	//root folder
	if(title == null && extension == null){		
		pathname = path.resolve(outputPath);
	}
	else if(pathParam == TAG_ATTR){
		pathname = path.resolve(outputPath,"tags",encodeURIComponent(title) + extension);	
	}
	else if(pathParam == FRAMEWORK_ATTR){
		pathname = path.resolve(outputPath,encodeURIComponent(title) + extension);		
	}	
	else if(pathParam == POSTS_ATTR){
		if($tw.wiki && title) {
			var tiddler = $tw.wiki.getTiddler(title);
			if(tiddler){
				var created = tiddler.fields["created"];
				var fmt_created = $tw.utils.formatDateString(created,"YYYY/MM/DD");							
				pathname = path.resolve(outputPath,fmt_created,encodeURIComponent(title) + extension);
			}			
		}
	}
	return pathname.toLowerCase();
};

//this fixes up links from within blog posts to match the output above
LinkWidget.prototype.getExportLink = function(originalLink) {	
	var attr = this.getVariable("tv-subfolder-links");
	var to = this.to;
	var path_to_root="./"	
	var finalLink=path_to_root
	//------------------------------------------------------
	//correcting the root location based on attribute type...
	//reference the folder stucture description above for more details

	//generic blog posts are 3 layers deep
	if(attr==POSTS_ATTR){	
		path_to_root="../../../"
	}
	//autogenerated tag posts and framework stuff go in the same place for convenience [root]/tag/...
	else if(attr==TAG_ATTR){		
		path_to_root="../"			
	}
	//index.html and framework stuff are special and go in the root
	else if(attr==INDEX_ATTR || attr==FRAMEWORK_ATTR){		
		if(attr==FRAMEWORK_ATTR)
		{
			//console.log("FRAMEWORK")
			//console.log(to)
		}
		path_to_root="./"	
	}

	//------------------------------------------------------
	//Using path_to_root generate the correct folder path to this post 
	//this can be based on the the presence of tags or attributes, as well as simply the link destincation
	//if we are a link to the index post....
	if(to==INDEX_POST){
		finalLink = path_to_root;
	}	
	else if(this.getAttribute(TAG_LINK_ATTR)){
		//if we are a link to a auto generated tag page
		finalLink = path_to_root+"tags/";
	}				
	else if($tw.wiki && to) {
		//links to anything else...
		var tiddler = $tw.wiki.getTiddler(to);
		if(tiddler){
			var created = tiddler.fields["created"];
			var fmt_created = $tw.utils.formatDateString(created,"YYYY/MM/DD");
			finalLink = path_to_root + fmt_created + "/";
			//most posts will be in the place created above, but blog-framework tagged ones are in the root
			if(tiddler.fields.tags) {
				var p = tiddler.fields.tags.indexOf(FRAMEWORK_TAG);
				if(p !== -1) {
					finalLink = path_to_root;					
				}
			}
		}
	}
	var wikiLinkTemplateMacro = this.getVariable("tv-wikilink-template"),
		wikiLinkTemplate = wikiLinkTemplateMacro ? wikiLinkTemplateMacro.trim() : "#$uri_encoded$",
		wikiLinkText = wikiLinkTemplate.replace("$uri_encoded$",encodeURIComponent(to));	
	wikiLinkText = wikiLinkText.replace("$uri_doubleencoded$",encodeURIComponent(encodeURIComponent(to)));
	return (finalLink + wikiLinkText).toLocaleLowerCase();
};

})();
